conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
conflicts_in_buffer_count <- nrow(conflicts_in_buffers)
# Ensure unique conflict events are counted by removing duplicates
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(event_ids, .keep_all = TRUE)  # Replace `id` with the unique identifier for conflict events
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Count conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted by removing duplicates
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(id, .keep_all = TRUE)  # Replace `id` with the unique identifier for conflict events
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Count conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted by removing duplicates
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(event_id_1pd, .keep_all = TRUE)  # Replace `id` with the unique identifier for conflict events
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Count conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Count the unique conflict events within buffers
conflicts_in_buffer_count <- nrow(conflicts_in_buffers)
# Total number of conflict events
total_conflicts <- nrow(conflicts_projected)
# Proportion of conflicts near cities
prop_conflicts_near_cities <- conflicts_in_buffer_count / total_conflicts
# Display the proportion of conflicts near cities
cat("Proportion of conflicts near cities:", prop_conflicts_near_cities, "\n")
# Perform a proportion test (using a hypothesized proportion, e.g., 25%)
expected_proportion <- 0.25  # Change this based on your hypothesis
prop_test_result <- prop.test(
x = conflicts_in_buffer_count,
n = total_conflicts,
p = expected_proportion
)
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Count conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted by removing duplicates
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(event_id_1pd, .keep_all = TRUE)  # Replace `id` with the unique identifier for conflict events
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Count conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted by removing duplicates
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
unique(event_id_1pd, .keep_all = TRUE)  # Replace `id` with the unique identifier for conflict events
View(conflicts_in_buffers)
View(conflicts_projected)
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Count conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted by removing duplicates
conflicts_in_buffers_unique <- unique(conflicts_in_buffers[, "event_id_1pd"])  # Replace 'event_id' with your unique identifier
# Count the unique conflict events within buffers
conflicts_in_buffer_count <- nrow(conflicts_in_buffers)
# Total number of conflict events
total_conflicts <- nrow(conflicts_projected)
# Proportion of conflicts near cities
prop_conflicts_near_cities <- conflicts_in_buffer_count / total_conflicts
# Display the proportion of conflicts near cities
cat("Proportion of conflicts near cities:", prop_conflicts_near_cities, "\n")
# Perform a proportion test (using a hypothesized proportion, e.g., 25%)
expected_proportion <- 0.25  # Change this based on your hypothesis
prop_test_result <- prop.test(
x = conflicts_in_buffer_count,
n = total_conflicts,
p = expected_proportion
)
colnames(conflicts_in_buffers)
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Add a unique ID to conflict events
conflicts_projected$unique_id <- seq_len(nrow(conflicts_projected))
# Perform spatial join to find conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(unique_id, .keep_all = TRUE)
View(conflicts_projected)
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Add a unique ID to conflict events
conflicts_projected$unique_id <- seq_len(nrow(conflicts_projected))
# Perform spatial join to find conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Count the unique conflict events within buffers
conflicts_in_buffer_count <- nrow(conflicts_in_buffers)
# Total number of conflict events
total_conflicts <- nrow(conflicts_projected)
# Validate counts
cat("Unique conflict events within city buffers:", conflicts_in_buffer_count, "\n")
cat("Total conflict events:", total_conflicts, "\n")
# Proportion of conflicts near cities
prop_conflicts_near_cities <- conflicts_in_buffer_count / total_conflicts
# Display the proportion of conflicts near cities
cat("Proportion of conflicts near cities:", prop_conflicts_near_cities, "\n")
# Perform a proportion test (using a hypothesized proportion, e.g., 25%)
expected_proportion <- 0.25  # Change this based on your hypothesis
prop_test_result <- prop.test(
x = conflicts_in_buffer_count,
n = total_conflicts,
p = expected_proportion
)
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Add a unique ID to conflict events
conflicts_projected$unique_id <- seq_len(nrow(conflicts_projected))
# Perform spatial join to find conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(unique_id, .keep_all = TRUE)
View(ukraine_cities)
View(conflicts)
View(cities)
# Load global country boundaries
world <- ne_countries(scale = "medium", returnclass = "sf")
ukraine_boundary <- world %>% filter(name == "Ukraine")
cities <- read.csv("worldcities.csv")
conflicts <- read.csv("event_1pd_latest_2024.csv")
#| label: imports
library(tidyverse) |> suppressPackageStartupMessages()
library(sf) |> suppressPackageStartupMessages()
library(mapview) |> suppressPackageStartupMessages()
library(ggplot2) |> suppressPackageStartupMessages()
library(leaflet) |> suppressPackageStartupMessages()
library(units) |> suppressPackageStartupMessages()
library(rnaturalearth) |> suppressPackageStartupMessages()
library(rnaturalearthdata) |> suppressPackageStartupMessages()
# Load global country boundaries
world <- ne_countries(scale = "medium", returnclass = "sf")
ukraine_boundary <- world %>% filter(name == "Ukraine")
cities <- read.csv("worldcities.csv")
conflicts <- read.csv("event_1pd_latest_2024.csv")
# filter ukraine data
ukraine_cities <- cities %>% filter(country == "Ukraine") %>%
select(city = city_name, lat, lng)
View(cities)
# filter ukraine data
ukraine_cities <- cities %>% filter(country == "Ukraine") %>%
select(city, lat, lng)
View(ukraine_cities)
# Filter the conflict data to remove outliers
conflicts <- conflicts %>%
filter(latitude >= 44 & latitude <= 52,
longitude >= 22 & longitude <= 40) %>%
select(lat = latitude, lng = longitude)
View(conflicts)
# Convert to spatial data frames
ukraine_cities_sf <- st_as_sf(ukraine_cities, coords = c("lng", "lat"), crs = 4326)
conflicts_sf <- st_as_sf(conflicts, coords = c("longitude", "latitude"), crs = 4326)
View(conflicts)
# Convert to spatial data frames
ukraine_cities_sf <- st_as_sf(ukraine_cities, coords = c("lng", "lat"), crs = 4326)
conflicts_sf <- st_as_sf(conflicts, coords = c("lng", "lat"), crs = 4326)
View(ukraine_cities_sf)
View(conflicts_sf)
# Draw the map of Ukraine and plot city points
ggplot() +
geom_sf(data = ukraine_boundary) +
geom_sf(data = ukraine_cities_sf, color = "blue", size = 2, alpha = 0.7) +
geom_sf(data = conflicts_sf, color = "red", size = 1.5, alpha = 0.8) +
labs(title = "Map of Ukraine with Cities",
x = "Longitude", y = "Latitude") +
theme_minimal()
# Calculate distances between conflict events and cities
distances <- st_distance(ukraine_cities_sf, conflicts_sf)
# Calculate the average distance for each city to all conflict points (in meters)
avg_distances <- apply(distances, 1, mean)
# Convert distances to kilometers
avg_distances_km <- avg_distances / 1000
# Add average distances to the city data for reference
ukraine_cities$avg_distance_to_conflicts_km <- avg_distances_km
# Display the overall average
average_distance_km <- mean(avg_distances_km)
cat("Average Conflict Distance to Cities (in km):", average_distance_km)
ggplot(data = as.data.frame(ukraine_cities)) +
geom_histogram(aes(x = avg_distance_to_conflicts_km), bins = 30, fill = "steelblue") +
labs(title = "Distribution of CIties Distance to Conflictions",
x = "Minimum Distance (KM)",
y = "Count") +
theme_minimal()
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Add a unique ID to conflict events
conflicts_projected$unique_id <- seq_len(nrow(conflicts_projected))
# Perform spatial join to find conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(unique_id, .keep_all = TRUE)
View(conflicts_in_buffers)
View(conflicts)
View(conflicts_in_buffers)
View(city_buffers)
View(conflicts_projected)
View(ukraine_cities)
View(conflicts)
cities <- read.csv("worldcities.csv")
conflicts <- read.csv("event_1pd_latest_2024.csv")
# Filter the conflict data to remove outliers
conflicts <- conflicts %>%
filter(latitude >= 44 & latitude <= 52,
longitude >= 22 & longitude <= 40) %>%
select(lat = latitude, lng = longitude) %>%
distinct(lat, lng, .keep_all = TRUE)
View(conflicts)
# Convert to spatial data frames
ukraine_cities_sf <- st_as_sf(ukraine_cities, coords = c("lng", "lat"), crs = 4326)
conflicts_sf <- st_as_sf(conflicts, coords = c("lng", "lat"), crs = 4326)
# Draw the map of Ukraine and plot city points
ggplot() +
geom_sf(data = ukraine_boundary) +
geom_sf(data = ukraine_cities_sf, color = "blue", size = 2, alpha = 0.7) +
geom_sf(data = conflicts_sf, color = "red", size = 1.5, alpha = 0.8) +
labs(title = "Map of Ukraine with Cities",
x = "Longitude", y = "Latitude") +
theme_minimal()
# Calculate distances between conflict events and cities
distances <- st_distance(ukraine_cities_sf, conflicts_sf)
# Calculate the average distance for each city to all conflict points (in meters)
avg_distances <- apply(distances, 1, mean)
# Convert distances to kilometers
avg_distances_km <- avg_distances / 1000
# Add average distances to the city data for reference
ukraine_cities$avg_distance_to_conflicts_km <- avg_distances_km
# Display the overall average
average_distance_km <- mean(avg_distances_km)
cat("Average Conflict Distance to Cities (in km):", average_distance_km)
ggplot(data = as.data.frame(ukraine_cities)) +
geom_histogram(aes(x = avg_distance_to_conflicts_km), bins = 30, fill = "steelblue") +
labs(title = "Distribution of CIties Distance to Conflictions",
x = "Minimum Distance (KM)",
y = "Count") +
theme_minimal()
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Add a unique ID to conflict events
conflicts_projected$unique_id <- seq_len(nrow(conflicts_projected))
# Perform spatial join to find conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(unique_id, .keep_all = TRUE)
# Count the unique conflict events within buffers
conflicts_in_buffer_count <- nrow(conflicts_in_buffers_unique)
# Total number of conflict events
total_conflicts <- nrow(conflicts_projected)
# Validate counts
cat("Unique conflict events within city buffers:", conflicts_in_buffer_count, "\n")
cat("Total conflict events:", total_conflicts, "\n")
# Proportion of conflicts near cities
prop_conflicts_near_cities <- conflicts_in_buffer_count / total_conflicts
# Display the proportion of conflicts near cities
cat("Proportion of conflicts near cities:", prop_conflicts_near_cities, "\n")
# Perform a proportion test (using a hypothesized proportion, e.g., 25%)
expected_proportion <- 0.25  # Change this based on your hypothesis
prop_test_result <- prop.test(
x = conflicts_in_buffer_count,
n = total_conflicts,
p = expected_proportion
)
# Print the statistical test result
print(prop_test_result)
library(ggplot2)
ggplot() +
geom_sf(data = ukraine_cities_projected, color = "blue") +
geom_sf(data = st_buffer(ukraine_cities_projected, dist = buffer_radius), fill = "lightblue", alpha = 0.5) +
geom_sf(data = conflicts_projected, color = "red", size = 0.5) +
labs(title = "Conflict Points and City Buffers", x = "Longitude", y = "Latitude") +
theme_minimal()
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 10000  # 10 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Add a unique ID to conflict events
conflicts_projected$unique_id <- seq_len(nrow(conflicts_projected))
# Perform spatial join to find conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(unique_id, .keep_all = TRUE)
# Count the unique conflict events within buffers
conflicts_in_buffer_count <- nrow(conflicts_in_buffers_unique)
# Total number of conflict events
total_conflicts <- nrow(conflicts_projected)
# Validate counts
cat("Unique conflict events within city buffers:", conflicts_in_buffer_count, "\n")
cat("Total conflict events:", total_conflicts, "\n")
# Proportion of conflicts near cities
prop_conflicts_near_cities <- conflicts_in_buffer_count / total_conflicts
# Display the proportion of conflicts near cities
cat("Proportion of conflicts near cities:", prop_conflicts_near_cities, "\n")
# Perform a proportion test (using a hypothesized proportion, e.g., 25%)
expected_proportion <- 0.25  # Change this based on your hypothesis
prop_test_result <- prop.test(
x = conflicts_in_buffer_count,
n = total_conflicts,
p = expected_proportion
)
# Print the statistical test result
print(prop_test_result)
library(ggplot2)
ggplot() +
geom_sf(data = ukraine_cities_projected, color = "blue") +
geom_sf(data = st_buffer(ukraine_cities_projected, dist = buffer_radius), fill = "lightblue", alpha = 0.5) +
geom_sf(data = conflicts_projected, color = "red", size = 0.5) +
labs(title = "Conflict Points and City Buffers", x = "Longitude", y = "Latitude") +
theme_minimal()
library(ggplot2)
ggplot() +
geom_sf(data = ukraine_cities_projected, color = "blue") +
geom_sf(data = st_buffer(ukraine_cities_projected, dist = buffer_radius), fill = "lightblue", alpha = 0.5) +
geom_sf(data = conflicts_projected, color = "red", size = 0.5) +
labs(title = "Conflict Points and City Buffers(< 10KM", x = "Longitude", y = "Latitude") +
theme_minimal()
library(ggplot2)
ggplot() +
geom_sf(data = ukraine_cities_projected, color = "blue") +
geom_sf(data = st_buffer(ukraine_cities_projected, dist = buffer_radius), fill = "lightblue", alpha = 0.5) +
geom_sf(data = conflicts_projected, color = "red", size = 0.5) +
labs(title = "Conflict Points and City Buffers(< 10KM)", x = "Longitude", y = "Latitude") +
theme_minimal()
library(ggplot2)
ggplot() +
geom_sf(data = ukraine_cities_projected, color = "blue") +
geom_sf(data = st_buffer(ukraine_cities_projected, dist = buffer_radius), fill = "lightblue", alpha = 0.5) +
geom_sf(data = conflicts_projected, color = "red", size = 0.5) +
labs(title = "Conflict Points and City Buffers(<50KM)", x = "Longitude", y = "Latitude") +
theme_minimal()
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius (e.g., 50 km)
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Add a unique ID to conflict events
conflicts_projected$unique_id <- seq_len(nrow(conflicts_projected))
# Perform spatial join to find conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(unique_id, .keep_all = TRUE)
# Count the unique conflict events within buffers
conflicts_in_buffer_count <- nrow(conflicts_in_buffers_unique)
# Total number of conflict events
total_conflicts <- nrow(conflicts_projected)
# Validate counts
cat("Unique conflict events within city buffers:", conflicts_in_buffer_count, "\n")
cat("Total conflict events:", total_conflicts, "\n")
# Proportion of conflicts near cities
prop_conflicts_near_cities <- conflicts_in_buffer_count / total_conflicts
# Display the proportion of conflicts near cities
cat("Proportion of conflicts near cities:", prop_conflicts_near_cities, "\n")
# Perform a proportion test (using a hypothesized proportion, e.g., 25%)
expected_proportion <- 0.25  # Change this based on your hypothesis
prop_test_result <- prop.test(
x = conflicts_in_buffer_count,
n = total_conflicts,
p = expected_proportion
)
# Print the statistical test result
print(prop_test_result)
library(ggplot2)
ggplot() +
geom_sf(data = ukraine_cities_projected, color = "blue") +
geom_sf(data = st_buffer(ukraine_cities_projected, dist = buffer_radius), fill = "lightblue", alpha = 0.5) +
geom_sf(data = conflicts_projected, color = "red", size = 0.5) +
labs(title = "Conflict Points and City Buffers(<50KM)", x = "Longitude", y = "Latitude") +
theme_minimal()
library(ggplot2)
ggplot() +
geom_sf(data = ukraine_cities_projected, color = "blue") +
geom_sf(data = st_buffer(ukraine_cities_projected, dist = buffer_radius), fill = "lightblue", alpha = 0.5) +
geom_sf(data = conflicts_projected, color = "red", size = 0.5) +
labs(title = "Conflict Points and City Buffers (<50KM)", x = "Longitude", y = "Latitude") +
theme_minimal()
# Transform to a projected CRS (e.g., UTM Zone 37N) for accurate distance calculations
ukraine_cities_projected <- st_transform(ukraine_cities_sf, crs = 32637)
conflicts_projected <- st_transform(conflicts_sf, crs = 32637)
# Define the buffer radius
buffer_radius <- 50000  # 50 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Add a unique ID to conflict events
conflicts_projected$unique_id <- seq_len(nrow(conflicts_projected))
# Perform spatial join to find conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(unique_id, .keep_all = TRUE)
# Count the unique conflict events within buffers
conflicts_in_buffer_count <- nrow(conflicts_in_buffers_unique)
# Total number of conflict events
total_conflicts <- nrow(conflicts_projected)
# Validate counts
cat("Unique conflict events within city buffers:", conflicts_in_buffer_count, "\n")
cat("Total conflict events:", total_conflicts, "\n")
# Proportion of conflicts near cities
prop_conflicts_near_cities <- conflicts_in_buffer_count / total_conflicts
# Display the proportion of conflicts near cities
cat("Proportion of conflicts near cities:", prop_conflicts_near_cities, "\n")
# Perform a proportion test (using a hypothesized proportion, e.g., 25%)
expected_proportion <- 0.50  # Change this based on your hypothesis
prop_test_result <- prop.test(
x = conflicts_in_buffer_count,
n = total_conflicts,
p = expected_proportion
)
# Print the statistical test result
print(prop_test_result)
# Define the buffer radius
buffer_radius <- 10000  # 10 km in meters
# Create buffers for all cities
city_buffers <- st_buffer(ukraine_cities_projected, dist = buffer_radius)
# Add a unique ID to conflict events
conflicts_projected$unique_id <- seq_len(nrow(conflicts_projected))
# Perform spatial join to find conflict events within city buffers
conflicts_in_buffers <- st_join(conflicts_projected, city_buffers, join = st_intersects)
# Ensure unique conflict events are counted
conflicts_in_buffers_unique <- conflicts_in_buffers %>%
distinct(unique_id, .keep_all = TRUE)
# Count the unique conflict events within buffers
conflicts_in_buffer_count <- nrow(conflicts_in_buffers_unique)
# Total number of conflict events
total_conflicts <- nrow(conflicts_projected)
# Validate counts
cat("Unique conflict events within city buffers:", conflicts_in_buffer_count, "\n")
cat("Total conflict events:", total_conflicts, "\n")
# Proportion of conflicts near cities
prop_conflicts_near_cities <- conflicts_in_buffer_count / total_conflicts
# Display the proportion of conflicts near cities
cat("Proportion of conflicts near cities:", prop_conflicts_near_cities, "\n")
# Perform a proportion test
expected_proportion <- 0.50
prop_test_result <- prop.test(
x = conflicts_in_buffer_count,
n = total_conflicts,
p = expected_proportion
)
# Print the statistical test result
print(prop_test_result)
library(ggplot2)
ggplot() +
geom_sf(data = ukraine_cities_projected, color = "blue") +
geom_sf(data = st_buffer(ukraine_cities_projected, dist = buffer_radius), fill = "lightblue", alpha = 0.5) +
geom_sf(data = conflicts_projected, color = "red", size = 0.5) +
labs(title = "Conflict Points and City Buffers(<10KM)", x = "Longitude", y = "Latitude") +
theme_minimal()
